package com.zuct.db.zuct_db.entity.base;

/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
                                                                                   
 * DO NOT EDIT THIS FILE!! 
 *
 *  FOR CUSTOMIZE StudentsBase PLEASE EDIT ../Students.java
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER CODE GENERATION --
 * 
 */
 

/**
 * This is the model of Students object
 * 
 */

import javax.persistence.GeneratedValue;
import javax.persistence.MappedSuperclass;
import javax.persistence.Id;
import javax.persistence.Column;
import java.util.Date;
import javax.persistence.ManyToOne;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.FetchType;
import java.util.stream.Collectors;

import com.zuct.db.zuct_db.entity.Students;
// Import relations
import com.zuct.db.zuct_db.entity.Programs;




import com.zuct.db.zuct_db.entity.Courses;

import com.zuct.db.zuct_db.entity.Lecturers;



@MappedSuperclass
public class StudentsBase {
	
	@Id
	@GeneratedValue
	private Long _id;
	
	// Attributes
	@Column(nullable=false)
    private Date date_of_birth;
	@Column(nullable=false)
    private String first_name;
	@Column(nullable=false)
    private String last_name;
	@Column()
    private String middle_name;
	@Column()
    private Double phone;
	@Column(nullable=false)
    private String sex;
	
	// Relations _enrolls
	@ManyToOne(fetch = FetchType.LAZY)
	private Programs _enrolls;
	
	
	// Relations m:m _takes
	@ManyToMany()
	@JoinTable(name="students_courses",
		joinColumns = @JoinColumn(name="students_ID"),
		inverseJoinColumns = @JoinColumn(name="courses_ID")
			)
	private List<Courses> _takes = new ArrayList<>();
	
	// Relations m:m _taught
	@ManyToMany()
	@JoinTable(name="students_lecturers",
		joinColumns = @JoinColumn(name="students_ID"),
		inverseJoinColumns = @JoinColumn(name="lecturers_ID")
			)
	private List<Lecturers> _taught = new ArrayList<>();
	
	
	public Long get_id() {
		return _id;
	}

	public void set_id(Long id) {
		this._id = id;
	}
	
	public Date getDate_of_birth() {
		return date_of_birth;
	}

	public void setDate_of_birth(Date date_of_birth) {
		this.date_of_birth = date_of_birth;
	}
	public String getFirst_name() {
		return first_name;
	}

	public void setFirst_name(String first_name) {
		this.first_name = first_name;
	}
	public String getLast_name() {
		return last_name;
	}

	public void setLast_name(String last_name) {
		this.last_name = last_name;
	}
	public String getMiddle_name() {
		return middle_name;
	}

	public void setMiddle_name(String middle_name) {
		this.middle_name = middle_name;
	}
	public Double getPhone() {
		return phone;
	}

	public void setPhone(Double phone) {
		this.phone = phone;
	}
	public String getSex() {
		return sex;
	}

	public void setSex(String sex) {
		this.sex = sex;
	}
    
	public void setPrograms(String _enrolls) {
		this._enrolls = new Programs(_enrolls);
	}

	public Programs get_enrolls() {
		return _enrolls;
	}
	

    
	
	public List<Courses> get_takes() {
		return this._takes;
	}

	public void add_takes(Courses courses) {
		this._takes.add(courses);
	}

	public void set_takes(List<String> courses) {
		this._takes = courses.stream()
			.map(id -> new Courses(id))
			.collect(Collectors.toList());
	}

	public void remove_takes(Courses courses) {
		this._takes.remove(courses);
	}
	
	
	public List<Lecturers> get_taught() {
		return this._taught;
	}

	public void add_taught(Lecturers lecturers) {
		this._taught.add(lecturers);
	}

	public void set_taught(List<String> lecturers) {
		this._taught = lecturers.stream()
			.map(id -> new Lecturers(id))
			.collect(Collectors.toList());
	}

	public void remove_taught(Lecturers lecturers) {
		this._taught.remove(lecturers);
	}
	
}